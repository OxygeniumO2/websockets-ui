import { MessageTypes, ShipTypes, Statuses } from './types';

export interface RequestReg {
  type: MessageTypes.reg;
  data: {
    name: string;
    password: string;
  };
  id: 0;
}

export interface ResponseReg {
  type: MessageTypes.reg;
  data: {
    name: string;
    index: number | string;
    error: boolean;
    errorText: string;
  };
  id: 0;
}

export interface Room {
  roomId: number | string;
  roomUsers: {
    name: string;
    index: number | string;
  }[];
}

export interface CreateGame {
  type: MessageTypes.createGame; //send for both players in the room, after they are connected to the room
  data: {
    idGame: number | string;
    idPlayer:
      | number
      | string /* generated by server id for player in the game session, not enemy (unique id for every player) */;
  };
  id: 0;
}

export interface Ship {
  position: {
    x: number;
    y: number;
  };
  direction: boolean;
  length: number;
  type: ShipTypes.huge | ShipTypes.large | ShipTypes.medium | ShipTypes.small;
}

export interface AddShips {
  type: MessageTypes.addShips;
  data: {
    gameId: string;
    ships: Ship[];
    indexPlayer: string;
  };
  id: 0;
}

export interface StartGame {
  type: MessageTypes.startGame;
  data: {
    ships: Ship[];
    currentPlayerIndex: string;
  };
  id: 0;
}

export interface GameDB {
  gameId: string;
  shipsPlayerWhoCreated: Ship[];
  shipsPlayer2: Ship[];
  indexPlayerWhoCreated: string;
  indexPlayer2: string;
  indexPlayerTurn: string;
  shipsPositionPlayerWhoCreated: ShipDB[];
  shipsPositionPlayer2: ShipDB[];
  cellsPlayerWhoCreated: Position[];
  cellsPlayer2: Position[];
}

export interface Position {
  x: number;
  y: number;
  isHit: boolean;
}

export interface ShipDB {
  positions: Position[];
  health: number;
}

export interface Attack {
  type: MessageTypes.attack;
  data: {
    gameId: string;
    x: number;
    y: number;
    indexPlayer: string /* id of the player in the current game session */;
  };
  id: 0;
}

export interface AttackFeedback {
  type: MessageTypes.attack;
  data: {
    position: {
      x: number;
      y: number;
    };
    currentPlayer: number | string /* id of the player in the current game session */;
    status: Statuses.miss | Statuses.killed | Statuses.shot;
  };
  id: 0;
}
